<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须指向Dao接口 -->
<mapper namespace="com.wjm.spring_mybatis.dao.StudentDao">
    <!--查询结果不包含app列表-->
    <resultMap id="studentMap" type="Student">
        <id column="id" property="id" jdbcType="BIGINT"/>

        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="number" property="number" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="INTEGER"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
    </resultMap>
    <!--查询的时候将教师列表一起查询出来-->
    <resultMap id="studentTeacherMap" type="Student" extends="studentMap">
        <collection property="teachers" ofType="Teacher">
            <id property="id" column="t_id" jdbcType="BIGINT"/>

            <result property="name" column="t_name" jdbcType="VARCHAR"/>
            <result property="number" column="t_number" jdbcType="VARCHAR"/>
            <result property="gender" column="t_gender" jdbcType="INTEGER"/>
            <result property="age" column="t_age" jdbcType="INTEGER"/>
        </collection>
    </resultMap>


    <sql id="columns">
        id,name,number,gender,age
    </sql>
	
	<!-- id必须和Mapper Interface中的某个方法名一致 -->
    <select id="findStudentByNumber" resultMap="studentMap" parameterType="java.lang.String">
        SELECT
        <include refid="columns"/>
        FROM student
        WHERE number=#{0}
    </select>

    <select id="findStudentById" resultMap="studentTeacherMap" parameterType="java.lang.Integer">
        SELECT
        s.id,s.name,s.number,s.gender,s.age,

        t.id as t_id,t.name as t_name,t.number as t_number,t.gender as t_gender,t.age as t_age
        FROM
        student s LEFT JOIN student_teacher st
        ON s.id=st.s_id
        LEFT JOIN teacher t
        ON t.id=st.t_id
        WHERE s.id=#{0}
    </select>

    <select id="findAll" resultMap="studentMap">
        SELECT * FROM student
    </select>

    <select id="findAllWithTeachers" resultMap="studentTeacherMap">
        SELECT
        s.id,s.name,s.number,s.gender,s.age,

        t.id as t_id,t.name as t_name,t.number as t_number,t.gender as t_gender,t.age as t_age
        FROM
        student s LEFT JOIN student_teacher st
        ON s.id=st.s_id
        LEFT JOIN teacher t
        ON t.id=st.t_id
    </select>

    <insert id="addStudent" parameterType="Student">
        insert into student
        (
        name,number,gender,age
        )
        values
        (
        #{name,jdbcType=VARCHAR},#{number,jdbcType=VARCHAR},#{gender,jdbcType=INTEGER},#{age,jdbcType=INTEGER}
        )
    </insert>
    <update id="updateStudent" parameterType="Student">
        update student
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="number != null">
                number = #{number,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                gender = #{gender,jdbcType=INTEGER},
            </if>
            <if test="age != null">
                age = #{age,jdbcType=INTEGER},
            </if>
        </set>
        where id=#{id,jdbcType=BIGINT}
    </update>
    <!--/*这种方式使用批量插入*/-->
    <insert id="selectTeachers"  parameterType="java.util.Map">

        INSERT INTO student_teacher
        (s_id,t_id)
        VALUES 
    	<foreach collection="param2" item="id" separator=",">
            (#{param1}, #{id})
        </foreach>

    </insert>
</mapper> 